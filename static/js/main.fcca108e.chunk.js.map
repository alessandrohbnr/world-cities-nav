{"version":3,"sources":["components/navigation-item/navigation-item.component.jsx","components/navigation/navigation-line.component.jsx","components/navigation/navigation.component.jsx","components/header/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationItem","props","handleClick","id","e","preventDefault","onClickItem","itemRef","current","React","createRef","this","label","classNames","isCurrent","className","ref","href","onClick","Component","NavigationLine","position","style","Navigation","handleLineStyle","item","left","offsetLeft","width","offsetWidth","handleNavResize","throttle","setState","lineStyle","state","selectedElm","handleItemClick","itemId","selectedItem","isCurrentItem","window","addEventListener","removeEventListener","list","map","section","key","defaultProps","Header","NavigationData","cities","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"krBA4CeA,G,kBA/Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKRC,YAAc,SAACC,GAAD,OAAQ,SAACC,GACrBA,EAAEC,iBADyB,IAGnBC,EAAgB,EAAKL,MAArBK,YAERA,GAAeA,EAAYH,EAAI,EAAKI,QAAQC,WAR5C,EAAKD,QAAUE,IAAMC,YAHJ,E,sEAcT,IAAD,EAC0BC,KAAKV,MAA9BE,EADD,EACCA,GAAIS,EADL,EACKA,MACNC,EAFC,EACYC,UACS,aAE5B,OACE,wBAAIC,UAAS,sBAAiBF,IAC5B,uBACEG,IAAKL,KAAKJ,QACVU,KAAI,WAAMd,GACVe,QAASP,KAAKT,YAAYC,IACzBS,Q,GAhCkBH,IAAMU,YCKpBC,EARQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACE,yBAAKN,UAAU,yBACb,0BAAMA,UAAU,cAAcO,MAAOD,M,OCIrCE,G,kBASJ,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRuB,gBAAkB,SAACC,GACjB,OAAIA,EACK,CACLC,KAAMD,EAAKE,WACXC,MAAOH,EAAKI,aAIT,IAzBU,EA4BnBC,gBAAkBC,oBAAS,WACzB,EAAKC,SAAS,CACZC,UAAW,EAAKT,gBAAgB,EAAKU,MAAMC,iBAE5C,KAhCgB,EAkCnBC,gBAAkB,SAACC,EAAQ9B,GACzB,EAAKyB,SAAS,CACZM,aAAcD,EACdJ,UAAW,EAAKT,gBAAgBjB,GAChC4B,YAAa5B,KAtCE,EA0CnBgC,cAAgB,SAACpC,GACf,OAAO,EAAK+B,MAAMI,eAAiBnC,GAxCnC,EAAK+B,MAAQ,CACXI,aAAc,KACdL,UAAW,IALI,E,iFAUjBO,OAAOC,iBAAiB,SAAU9B,KAAKmB,mB,6CAIvCU,OAAOE,oBAAoB,SAAU/B,KAAKmB,mB,+BAgClC,IAAD,OACP,OACE,yBAAKf,UAAU,UACb,wBAAIA,UAAU,oBACXJ,KAAKV,MAAM0C,KAAKC,KAAI,gBAAEC,EAAF,EAAEA,QAASjC,EAAX,EAAWA,MAAX,OACnB,kBAAC,EAAD,CACEkC,IAAKD,EACL1C,GAAI0C,EACJvC,YAAa,EAAK8B,gBAClBxB,MAAOA,EACPE,UAAW,EAAKyB,cAAcM,SAGpC,kBAAC,EAAD,CAAgBxB,SAAUV,KAAKuB,MAAMD,iB,GApEpBxB,IAAMU,YAAzBI,EAKGwB,aAAe,CACpBJ,KAAM,IAoEKpB,Q,OCrEAyB,G,MANA,kBACb,4BAAQjC,UAAU,aAChB,kBAAC,EAAD,CAAY4B,KAAMM,EAAeC,Y,MCItBC,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCGcqC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fcca108e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './navigation-item.styles.scss'\n\nclass NavigationItem extends React.Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClickItem: PropTypes.func.isRequired,\n    isCurrent: PropTypes.bool\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.itemRef = React.createRef()\n  }\n  \n  handleClick = (id) => (e) => {\n    e.preventDefault()\n  \n    const { onClickItem } = this.props\n\n    onClickItem && onClickItem(id, this.itemRef.current)\n  }\n\n  render() {\n    const { id, label, isCurrent } = this.props\n    const classNames = isCurrent ? `current`: ``\n\n    return (\n      <li className={`wc-nav-item ${classNames}`}>\n        <a \n          ref={this.itemRef}\n          href={`#${id}`} \n          onClick={this.handleClick(id)}>\n          {label}\n        </a>\n      </li>\n    )\n  }\n}\n\nexport default NavigationItem\n","import React from 'react'\n\nconst NavigationLine = ({ position }) => {\n  return (\n    <div className=\"wc-nav-line-container\">\n      <span className=\"wc-nav-line\" style={position}></span>\n    </div>\n  )\n}\n\nexport default NavigationLine","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport NavigationItem from '../navigation-item/navigation-item.component'\nimport NavigationLine from './navigation-line.component';\nimport { throttle } from 'lodash'\n\nimport './navigation.styles.scss'\n\nclass Navigation extends React.Component {\n  static propTypes = {\n    list: PropTypes.array\n  }\n\n  static defaultProps = {\n    list: []\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedItem: null,\n      lineStyle: {}\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleNavResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleNavResize)\n  }\n\n  handleLineStyle = (item) => {\n    if (item) {\n      return {\n        left: item.offsetLeft,\n        width: item.offsetWidth\n      }\n    }\n\n    return {}\n  }\n\n  handleNavResize = throttle(() => {\n    this.setState({\n      lineStyle: this.handleLineStyle(this.state.selectedElm)\n    })\n  }, 200)\n\n  handleItemClick = (itemId, itemRef) => {\n    this.setState({\n      selectedItem: itemId,\n      lineStyle: this.handleLineStyle(itemRef),\n      selectedElm: itemRef\n    })\n  }\n\n  isCurrentItem = (id) => {\n    return this.state.selectedItem === id\n  }\n\n  render() {\n    return (\n      <nav className=\"wc-nav\">\n        <ul className=\"wc-nav-container\">\n          {this.props.list.map(({section, label}) => (\n            <NavigationItem \n              key={section}\n              id={section}\n              onClickItem={this.handleItemClick}\n              label={label}\n              isCurrent={this.isCurrentItem(section)} />\n          ))}\n        </ul>\n        <NavigationLine position={this.state.lineStyle} />\n      </nav>\n    )\n  }\n}\n\nexport default Navigation\n","import React from 'react'\n\nimport Navigation from '../navigation/navigation.component'\n\nimport NavigationData from '../../utils/navigation.data.json'\n\nimport './header.styles.scss'\n\nconst Header = () => (\n  <header className=\"wc-header\">\n    <Navigation list={NavigationData.cities}/>\n  </header>\n)\n\nexport default Header\n","import React from 'react'\n\nimport Header from './components/header/header.component'\n\nimport './App.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}